generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/prisma/meeting"
}

datasource db {
  provider = "postgresql"
  url      = env("MEETING_DATABASE_URL")
}

model Meeting {
  id                 String           @id @db.Uuid
  ownerGroupId       String           @db.Uuid
  participantGroupId String?          @db.Uuid
  ownerGroup         MeetingGroup     @relation("owner", fields: [ownerGroupId], references: [id], onDelete: Cascade)
  participantGroup   MeetingGroup?    @relation("participant", fields: [participantGroupId], references: [id], onDelete: SetNull)
  requests           MeetingRequest[]
}

model MeetingVoteResult {
  id        String   @id @db.Uuid
  meetingId String   @db.Uuid
  voteId    String   @db.Uuid
  type      VoteType

  @@unique([meetingId, type])
}

enum VoteType {
  PLACE
  TIME
}

model MeetingRequest {
  id               String              @id @db.Uuid
  meetingId        String              @db.Uuid
  requesterGroupId String              @db.Uuid
  state            MeetingRequestState
  meeting          Meeting             @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  requesterGroup   MeetingGroup        @relation(fields: [requesterGroupId], references: [id], onDelete: Cascade)
}

model MeetingGroup {
  id            String                    @id @db.Uuid
  ownerId       String                    @db.Uuid
  title         String                    @db.VarChar(20)
  content       String
  ownMeeting    Meeting[]                 @relation("owner")
  joinedMeeting Meeting[]                 @relation("participant")
  participants  MeetingGroupParticipant[]
  sentRequests  MeetingRequest[]
}

model MeetingGroupParticipant {
  id             String       @id @db.Uuid
  meetingGroupId String       @db.Uuid
  participantId  String       @db.Uuid
  meetingGroup   MeetingGroup @relation(fields: [meetingGroupId], references: [id], onDelete: Cascade)
}

enum MeetingRequestState {
  PENDING
  REJECT
  REPENDING
  BANNED
}
